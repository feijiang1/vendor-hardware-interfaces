#version 450
layout (constant_id = 0) const int LOCAL_SZ_X = 0;
layout (constant_id = 1) const int ACTIVATION = 0;
layout (constant_id = 2) const int BROADCAST = 0;
layout (constant_id = 3) const int TYPE = 0; // 0: Add, 1: Multiply

#define ACTIVATION_FUNCTION(x)  \
     { \
     if (ACTIVATION == 1) \
       x = max(x, 0.0);    \
     else if (ACTIVATION == 2)  \
       x = clamp(x, -1.0, 1.0); \
     else if (ACTIVATION == 3)  \
       x = clamp(x, 0.0, 6.0);  \
     }

layout(push_constant) uniform pushBlock {
    uint total_thread;
    int round;
} p;

layout(binding = 0) readonly buffer Input0{
    float in0[];
};
layout(binding = 1) readonly buffer Input1 {
    float in1[];
};
layout(binding = 2) writeonly buffer Output{
    float out0[];
};

#define COMPUTE_ELEWISE(operand1, operand2, result) \
    if (TYPE == 0) \
      result = operand1 + operand2; \
    else if (TYPE == 1) \
      result = operand1 * operand2; \
    else \
      return;



layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= p.total_thread) return;

    float f = 0.;
    if (BROADCAST == 1)
    {
        COMPUTE_ELEWISE(in0[idx], in1[idx % p.round], f);
    }
    else
    {
        COMPUTE_ELEWISE(in0[idx], in1[idx], f);
    }

    ACTIVATION_FUNCTION(f);
    out0[idx] = f;
}

